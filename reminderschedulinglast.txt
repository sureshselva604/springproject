!pip install openai==0.28
pip install groq
from groq import Groq
import sqlite3
from datetime import datetime, timedelta
import openai
import time
import threading

# Initialize SQLite database
conn = sqlite3.connect('appointments.db', check_same_thread=False)
cursor = conn.cursor()

# Create tables
cursor.execute('''
    CREATE TABLE IF NOT EXISTS Doctor (
        doctor_id INTEGER PRIMARY KEY AUTOINCREMENT,
        doctor_name TEXT,
        specialization TEXT,
        email_id TEXT
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS Patient (
        patient_id INTEGER PRIMARY KEY AUTOINCREMENT,
        firstname TEXT,
        lastname TEXT,
        email TEXT,
        phonenumber TEXT
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS Appointment (
        appointment_id INTEGER PRIMARY KEY AUTOINCREMENT,
        visit_reason TEXT,
        appointment_date TEXT,
        start_time TEXT,
        end_time TEXT,
        patient_id INTEGER,
        doctor_id INTEGER,
        isappointmentconfirmed BOOLEAN,
        FOREIGN KEY(patient_id) REFERENCES Patient(patient_id),
        FOREIGN KEY(doctor_id) REFERENCES Doctor(doctor_id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS PrescriptionPlanner (
        prescription_id INTEGER PRIMARY KEY AUTOINCREMENT,
        drug_name TEXT,
        time TIME,
        mode TEXT,
        start_date DATE,
        end_date DATE,
        meal_type TEXT,  -- 'breakfast', 'lunch', 'dinner'
        prescription_image TEXT,
        user_id INTEGER,
        FOREIGN KEY(user_id) REFERENCES Patient(patient_id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS Reminder (
        reminder_id INTEGER PRIMARY KEY AUTOINCREMENT,
        date_time TEXT,
        message TEXT,
        type TEXT,  -- 'appointment' or 'prescription'
        user_id INTEGER,
        FOREIGN KEY(user_id) REFERENCES Patient(patient_id)
    )
''')

# Insert sample data
cursor.executemany('''
    INSERT INTO Doctor (doctor_name, specialization, email_id) VALUES (?, ?, ?)
''', [
    ('Dr. John Doe', 'Cardiology', 'johndoe@example.com'),
    ('Dr. Jane Smith', 'Neurology', 'janesmith@example.com')
])

cursor.executemany('''
    INSERT INTO Patient (firstname, lastname, email, phonenumber) VALUES (?, ?, ?, ?)
''', [
    ('Jane', 'Doe', 'janedoe@example.com', '1234567890'),
    ('John', 'Smith', 'johnsmith@example.com', '0987654321')
])

cursor.executemany('''
    INSERT INTO Appointment (visit_reason, appointment_date, start_time, end_time, patient_id, doctor_id, isappointmentconfirmed) VALUES (?, ?, ?, ?, ?, ?, ?)
''', [
    ('Routine Checkup', '2024-08-15', '10:00:00', '11:00:00', 1, 1, True),
    ('Follow-up Visit', '2024-08-16', '14:00:00', '15:00:00', 2, 2, False)
])

cursor.executemany('''
    INSERT INTO PrescriptionPlanner (drug_name, time, mode, start_date, end_date, meal_type, prescription_image, user_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
''', [
    ('Aspirin', '08:00:00', 'Before Food', '2024-08-10', '2024-08-20', 'breakfast', 'aspirin_image_1.png', 1),
    ('Metformin', '13:00:00', 'After Food', '2024-08-10', '2024-08-20', 'lunch', 'metformin_image_1.png', 1),
    ('Lisinopril', '19:00:00', 'After Food', '2024-08-10', '2024-08-20', 'dinner', 'lisinopril_image_1.png', 2),
    ('Atorvastatin', '07:00:00', 'Before Food', '2024-08-11', '2024-08-21', 'breakfast', 'atorvastatin_image_1.png', 2),
    ('Omeprazole', '08:30:00', 'Before Food', '2024-08-12', '2024-08-22', 'breakfast', 'omeprazole_image_1.png', 1),
    ('Insulin', '18:00:00', 'After Food', '2024-08-12', '2024-08-22', 'lunch', 'insulin_image_1.png', 2),
    ('Hydrochlorothiazide', '08:00:00', 'Before Food', '2024-08-13', '2024-08-23', 'breakfast', 'hydrochlorothiazide_image_1.png', 1),
    ('Gabapentin', '22:00:00', 'Before Food', '2024-08-13', '2024-08-23', 'dinner', 'gabapentin_image_1.png', 2),
    ('Prednisone', '09:00:00', 'After Food', '2024-08-14', '2024-08-24', 'lunch', 'prednisone_image_1.png', 1),
    ('Levothyroxine', '06:00:00', 'Before Food', '2024-08-14', '2024-08-24', 'breakfast', 'levothyroxine_image_1.png', 2)
])

# Commit changes
conn.commit()

# ReminderScheduler class
class ReminderScheduler:
    def __init__(self, api_key):
        openai.api_key = api_key

    def schedule_reminders_prescription(self, user_id):
      cursor.execute('''
          SELECT drug_name, time, mode, start_date, end_date, meal_type
          FROM PrescriptionPlanner
          WHERE user_id = ?
      ''', (user_id,))
      prescriptions = cursor.fetchall()

      # Group drugs by meal type, time, and mode
      grouped_drugs = {}
      for prescription in prescriptions:
          drug_name, time, mode, start_date, end_date, meal_type = prescription

          # Create a key based on time, mode, start_date, end_date, and meal_type
          key = (time, mode, start_date, end_date, meal_type)
          if key not in grouped_drugs:
              grouped_drugs[key] = []
          grouped_drugs[key].append(drug_name)
          print("Grouped Drugs are",grouped_drugs)

      # Schedule reminders and prepare data for LLM
      for (time, mode, start_date, end_date, meal_type), drugs_list in grouped_drugs.items():
          for single_date in self.date_range(start_date, end_date):
              reminder_times = self.calculate_reminder_times(time)
              for reminder_time in reminder_times:
                  # Prepare a message with all drug names, reminder time, mode, and meal type
                  message = self.generate_message_with_llm1(drugs_list, reminder_time, mode, meal_type)
                  self.set_reminder(single_date, reminder_time, message, 'prescription', user_id)





    def date_range(self, start_date, end_date):
        start_date = datetime.strptime(start_date, '%Y-%m-%d').date()
        end_date = datetime.strptime(end_date, '%Y-%m-%d').date()
        for n in range((end_date - start_date).days + 1):
            yield start_date + timedelta(n)

    def calculate_reminder_times(self, prescription_time):
        reminder_time = datetime.strptime(prescription_time, '%H:%M:%S').time()
        return [
            (datetime.combine(datetime.today(), reminder_time) - timedelta(minutes=30)).time(),
            reminder_time,
            (datetime.combine(datetime.today(), reminder_time) + timedelta(minutes=30)).time()
        ]

    def set_reminder(self, date, time, message, reminder_type, user_id):
        date_time = datetime.combine(date, time).strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('''
            INSERT INTO Reminder (date_time, message, type, user_id)
            VALUES (?, ?, ?, ?)
        ''', (date_time, message, reminder_type, user_id))
        conn.commit()

    def generate_message_with_llm1(self, drug_name, reminder_time, mode, meal_type):
        prompt1 = (f"Generate a reminder message for taking the medication '{drug_name}' at {reminder_time}. "
                  f"Mode: {mode}. Meal type: {meal_type}.")
        client = Groq(api_key=api_key)
        response = client.chat.completions.create(
        model="llama3-8b-8192",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt1}
          ]
                )
        # Extract the generated message from the response
        message = response.choices[0].message.content.strip()
        return message

    def schedule_reminders_appointment(self, appointment_id):
        cursor.execute('''
            SELECT appointment_id, appointment_date, start_time, patient_id, isappointmentconfirmed
            FROM Appointment
            WHERE appointment_id = ?
        ''', (appointment_id,))
        appointment = cursor.fetchone()
        if appointment:
            appointment_id, appointment_date, start_time, patient_id, isappointmentconfirmed = appointment
            if not isappointmentconfirmed:
                return  # Do not schedule if the appointment is not confirmed

            doctor_name = self.get_doctor_name(appointment_id)
            reminder_time = datetime.strptime(f"{appointment_date} {start_time}", '%Y-%m-%d %H:%M:%S') - timedelta(days=2)
            reminder_message = self.generate_message_with_llm2(doctor_name, appointment_id, appointment_date, start_time)
            self.set_reminder(reminder_time.date(), reminder_time.time(), reminder_message, 'appointment', patient_id)

    def get_doctor_name(self, appointment_id):
        cursor.execute('''
            SELECT doctor_name
            FROM Doctor
            JOIN Appointment ON Doctor.doctor_id = Appointment.doctor_id
            WHERE Appointment.appointment_id = ?
        ''', (appointment_id,))
        doctor = cursor.fetchone()
        return doctor[0] if doctor else "Unknown Doctor"

    def generate_message_with_llm2(self, doctor_name, appointment_id, appointment_date, start_time):
        prompt =  (f"Generate a reminder message for an appointment with Dr. {doctor_name}. "
                  f"Appointment ID: {appointment_id}. Date: {appointment_date}. Time: {start_time}.")
        client = Groq(api_key=api_key)
        response = client.chat.completions.create(
        model="llama3-8b-8192",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
          ]
                )
        # Extract the generated message from the response
        message = response.choices[0].message.content.strip()
        return message
# Scheduler thread function
def scheduler_thread(api_key):
    scheduler = ReminderScheduler(api_key)
    while True:
       # Schedule prescription reminders for all users
        cursor.execute('SELECT DISTINCT user_id FROM PrescriptionPlanner')
        users = cursor.fetchall()
        # for user_id in [user[0] for user in users]:
        scheduler.schedule_reminders_prescription(1)

        # Schedule appointment reminders for all confirmed appointments
        # cursor.execute('SELECT appointment_id FROM Appointment WHERE isappointmentconfirmed = 1')
        # appointments = cursor.fetchall()
        # for appointment_id in [appointment[0] for appointment in appointments]:
        #     scheduler.schedule_reminders_appointment(appointment_id)

        # Run every 24 hours
        time.sleep(86400)

# Start scheduler thread
api_key = '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'
scheduler_thread = threading.Thread(target=scheduler_thread, args=(api_key,))
scheduler_thread.start()


